#include <16F886.h>

#device adc=10
#FUSES NOWDT, HS, NOPROTECT,NOLVP,NODEBUG, BROWNOUT,NOCPD, NOWRT,NOPUT
#use delay(clock=20000000)
#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1)

#define pulsador_cuchilla PIN_C4
#define in4 PIN_C3
#define in3 PIN_C2
#define in2 PIN_C1
#define in1 PIN_C0
#define buzzer_pin PIN_B6
#define EB PIN_A4
#define pulsador PIN_B3
#define eco PIN_B5
#define trigger PIN_B1
#define DHT11 PIN_C5
#define cuchilla1 PIN_B4
#define transistor_bateria PIN_B7

Obstaculos();
Conversion();
Pwm_cuchilla();
Retorno();
Apagar_Cuchilla();
Pulso();
Programa();
BUZZER_Beep();
BUZZER_Doble_Beep();
Promedio_traccion();
bluetooth();
Deteccion_Orientacion_Cargador();

Humedad_Temperatura();

Bateria();

static long tiempo=0;
int segundos=0;
static int minutos=0;
static int minutos2=0;
static int horas=0;
char dia=1;
static int semanas=0;
static int delay1=0;
static int delay2=0;
static int delay3=0;
static int delay4=0;
static int delay_cuchilla=0;

long motor_izq=0;
long motor_der=0;
int sensor_izq=0;
int sensor_der=0;
long Reserva=0;
int llegada=0;
char contar_pulso=0;
char apagar=0;
char programacion=0;
float distancia1=0;
unsigned char bandera_cuchilla=0;
char stop=0;
char pir_bandera=0;
char bateria_bandera=1;
char permanecer_base=0;

int contador_motor=0;
int arranque=0;
int cuchilla=0;
float vadc1=0;
float vadc2=0;
float vadc3=0;
float vadc4=0;
float vadc5=0;
float vadc6=0;
float vadc7=0;
float vadc8=0;
char alto=0;
char contador_pir=0;
int control=0;
char retono_bandera=0;
char contador_vacio=0;
long traccion=300;//nivel de tension medido en las resistensias sensoras de los motores (2,45 volts)
int EMF=80; // nivel de tensión medido en la salida de los sensores de EMF indicando que fue detectado el campo magnetico de cable perimetral
int vacio=112;//120 //115 para 22
int cesped_bajo=30;//50 (entre 19 y 21 v)//35 con resistencia de 1k en base del tip42
int cesped_alto=30;// //40 3 del 9 2013 //42 con resistencia de 1k en base del tip42
long bateria_valor;
long bateria_alta;
long pwm_ruedas=0;
long motor_der_promedio=0;
long motor_izq_promedio=0;
long cuchilla_promedio=0;
long Reserva_promedio=0;
long divisor=0;
char activar_proteccion=0;
char proteccion=0;
float T_DHT11,RH_DHT11;
long xlee=0;
float distancia=0;
int c=0;
int ultra=0;
char Calendario=0;

int estado=0; //1 - cortando / 2 - cargando / 3- obstaculos / 4- volviendo a base

#INT_TIMER0
void interrupcion(void)

{
set_timer0(61); //reset TMR0

tiempo++;
delay1++;
delay2++;
delay3++;

     if(tiempo==48)
     {
        
     tiempo=0;
        delay4++;
     segundos++;
     contador_pir++;
     
     delay_cuchilla++;
        

     }
        if(segundos==60)
        {
        minutos++;
        minutos2++;
        segundos=0;

     
        }

           if(minutos==60)
           {
           horas++;
        minutos=0;
           }
              if(horas==24)
              {
              dia++;
              horas=0;
              }

                 if(dia==8)
                 {
                 semanas++;
                 dia=1;
                 }
}

#int_RDA
void RDA_isr(void)
{

bluetooth();

}

INT_AD //interrupción del ADC ,se activa cuando esta lista la conversión.
AD_isr()
{
set_adc_channel(0);
delay_ms(1);
vadc1=read_adc();
sensor_izq= (int)((vadc1*5 / 1000)*100);
delay_ms(1);

set_adc_channel(1);
delay_ms(1);
vadc2=read_adc();
sensor_der= (int)((vadc2*5 / 1000)*100);
delay_ms(1);

if(retono_bandera==0)
{
while(sensor_izq > EMF || sensor_der > EMF)
{

Obstaculos();
}

}
}

void main()
{

set_tris_b(00101101);
arranque=1;
//output_bit(led,0);
output_bit(buzzer_pin,0);

setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256);
set_timer0(61);
enable_interrupts(GLOBAL);
enable_interrupts(INT_RDA);
enable_interrupts(INT_TIMER0);

//SETUP_ADC_PORTS(ALL_ANALOG);

output_bit(EB,0);
setup_adc(ADC_CLOCK_INTERNAL);

setup_adc_ports(sAN0|VSS_VDD );
setup_adc_ports(sAN1|VSS_VDD );
setup_adc_ports(sAN2|VSS_VDD );
setup_adc_ports(sAN3|VSS_VDD );
setup_adc_ports(sAN4|VSS_VDD );
setup_adc_ports(sAN12|VSS_VDD );
setup_adc_ports(sAN8|VSS_VDD );

set_tris_c(10010000);

long seg=0;
long c=0;

char pwm_rueda=0;

delay_ms(500);
//set_tris_a(101111);
output_bit(cuchilla1,1);
output_bit(in1,0);
output_bit(in2,0);
output_bit(in3,0);
output_bit(in4,0);
output_bit(EB,0);
delay_ms(2000);

while(1)
{

output_bit(EB,1); //enable de los motores de las ruedas

bateria_valor=70;//200 es 22v , 182 20v
bateria_alta=250;//218 24v, 209 es 23
Bateria();//me indica con una bandera si el nivel de carga es alto o bajo
Humedad_Temperatura();

if(RH_DHT11>77 || control == 82 )
{
Deteccion_Orientacion_Cargador();
output_bit(buzzer_pin,1);
}

output_bit(EB,1);

     if(stop == 0 && bateria_bandera == 1 && permanecer_base== 0) //banderas principales del programa, apagar es para que se apague la cuchilla, stop es para el bluetooth, permanecer en base es para que se quede en la base si no es el dia asignado para cortar
        {
        estado = 1;   
        Conversion();
        Pulso();//chequea si esta activado el pulsador, para programar el robot de manera manual
        Programa();   //es la funcion principal donde se le ordena al robot cuando debe salir a cortar segun lo ajustado con pulso();
        Humedad_Temperatura(); //en desarrollo, debe realizar acciones en funcion de la temp y la humedad
  
        }
     if(stop == 0 && permanecer_base==0 && proteccion == 0)//banderas para condicionar el apagado de los motores cuando se levanta el robot
     {
              //Apagar_Cuchilla(); //apaga el robot cuando se levanta y las ruedas quedan al vacio
    
     } 

                       
        } 


     }
Conversion() //solo sirve para sensar el campo magnético, ya que para las otras mediciones se debe hacer un promedio de muestras

{

  delay_ms(1);
  set_adc_channel(0);
  delay_ms(1);
  vadc1=read_adc();
  sensor_izq= (int)((vadc1*5 / 1000)*100);
  delay_ms(1);

  
  
  set_adc_channel(1);
  delay_ms(1);
  vadc2=read_adc();
  sensor_der= (int)((vadc2*5 / 1000)*100);
  delay_ms(1);   
}

Obstaculos()//Detecta obstaculos frontales y los evade

{

estado=3;

 if( motor_der_promedio > traccion || motor_izq_promedio > traccion || sensor_izq > EMF || sensor_der > EMF  ) //si se atora cualquier rueda o si llega al campo, genera 3 moviminetos evasivos
  {
  output_bit(EB,0);   

  // ROBOT MOVIENDOSE HACIA ATRAS  
  delay_ms(200);
  output_bit(EB,1);

  output_bit(in1,0);
  output_bit(in2,1);
  output_bit(in3,1);
  output_bit(in4,0);

  delay_ms(500);
  output_bit(EB,0);
  delay_ms(200);

   // MOTOR GIRANDO HACIA LA IZQUIERDA
   output_bit(EB,1); 
  output_bit(in1,1);//motor izq para atras
  output_bit(in2,0);
  output_bit(in3,1);//motor derecho para adelante
  output_bit(in4,0);

  delay_ms(500);
  output_bit(EB,0);
  delay_ms(200);

   // MOTOR MOVIENDOSE HACIA ADELANTE
  output_bit(EB,1);
  output_bit(in1,1);
  output_bit(in2,0);
  output_bit(in3,0);
  output_bit(in4,1);


   while( motor_der_promedio > traccion || motor_izq_promedio > traccion )  //espera hasta que desminuya la tension en las resistensias sensoras de los motores, que aumento por cambiar de velocidad, para que no sea tomada como un obstaculo
        {
        Promedio_traccion();
        
        //output_bit(cuchilla1,1);
        }

   }


   // MOTOR MOVIENDOSE HACIA ADELANTE

   if( motor_der < traccion || motor_izq < traccion )
   { 
   output_bit(in1,1);
   output_bit(in2,0);
   output_bit(in3,0);
   output_bit(in4,1);
   output_bit(EB,1);

   }
Conversion();
}

Promedio_traccion()//saca promedio del valor sensado de la corriente en los 3 motores
{

int i=0;
motor_der_promedio=0;
motor_izq_promedio=0;
cuchilla_promedio=0;

 for(i=0;i<8;i++)
 {   
  set_adc_channel(2);
  delay_ms(1);
  vadc3=read_adc();
  motor_izq= (long)((vadc3*5 / 1000)*100);
  delay_ms(1);
  motor_der_promedio= motor_der_promedio + motor_izq;//motor_der_promedio +

  set_adc_channel(3);
  delay_ms(1);
  vadc4=read_adc();
  motor_der= (long)((vadc4*5 / 1000)*100);
  motor_izq_promedio= motor_der_promedio +  motor_der; //motor_izq_promedio +

 set_adc_channel(12);
  delay_ms(1);
  vadc5=read_adc();
  cuchilla= (int)((vadc5*5 / 1000)*100);   
 cuchilla_promedio=cuchilla_promedio + cuchilla;

  }
  motor_der_promedio = motor_der_promedio / 8;
  motor_izq_promedio = motor_izq_promedio / 8;
  cuchilla_promedio = cuchilla_promedio / 8;   
}

Pwm_cuchilla()//Funcion que controla el movimiento de la cuchilla
{

                 while(cuchilla_promedio > 35) // si se traba la cuchilla se apaga la misma para evitar sobreconsumo o lecciones a alguna persona o para cuidar la vida util de la cuchilla  
                 {

                 output_bit(cuchilla1,0);
                 output_bit(buzzer_pin,1);  
                 output_bit(EB,0);
                
                 }
                 
              
                 
  //}
}

Retorno()//Esta funcion es la encargada de hacer que el robot siga el cable una ves que ya esta ubicado en la mitad del robot

{

Bateria();
bateria_valor=Reserva_promedio+4;
output_bit(in1,1);
output_bit(in2,0);
output_bit(in3,0);
output_bit(in4,1);
output_bit(EB,1);

output_bit(cuchilla1,0);
output_bit(transistor_bateria,0);
//input(magnetico)
bateria_alta=250;//227 es 25
Bateria();
char bandera_pwm=0;
int Pwm_ruedas=0;
//////////////////////////////////////////////bateria_bandera=0; ///////////////////////////////////////SACAR

set_adc_channel(8);
delay_ms(1);
vadc8=read_adc();
divisor = (long)((vadc8*5 / 1000)*100);
delay_ms(1);

while(divisor<9)
{
set_adc_channel(8);
delay_ms(1);
vadc8=read_adc();
divisor = (long)((vadc8*5 / 1000)*100);
delay_ms(1);
Pwm_ruedas++;
output_bit(buzzer_pin,0);

Bateria();
bateria_valor=Reserva_promedio+4;
Conversion();

if( sensor_izq < EMF && sensor_der < EMF ) //si no se detecta campo el robot sigue derecho
{

output_bit(in1,1);
output_bit(in2,0);
output_bit(in3,0);
output_bit(in4,1);
delay_ms(30);

}

if( sensor_izq < EMF && sensor_der > EMF ) // si es mayo el izq , se hace girar el robot hacia la izq
{

output_bit(in1,0);
output_bit(in2,1);
output_bit(in3,0);
output_bit(in4,1);
delay_ms(30);
}

if( sensor_izq > EMF && sensor_der < EMF )// si es mayo el izq , se hace girar el robot hacia la izq
{

output_bit(in1,1);
output_bit(in2,0);
output_bit(in3,1);
output_bit(in4,0);
delay_ms(30);
}

}
output_bit(in1,0);
output_bit(in2,0);
output_bit(in3,0);
output_bit(in4,0);
output_bit(cuchilla1,0);
delay_ms(2000);

minutos2=0;
bateria_alta=106;//11,66v
BUZZER_Beep();

                do
           {
           while(Reserva_promedio < bateria_alta)
              {   
                       
              estado = 2;
              output_bit(transistor_bateria,0);
           
              if(minutos2==1)
                    {
              output_bit(transistor_bateria,1);
              delay_ms(200);
                    Bateria();
                      
                    minutos2=0;
              }
                 }
                BUZZER_Beep();      
                output_bit(transistor_bateria,1);   
                motor_der_promedio=300;
                motor_izq_promedio=300;
                sensor_izq=0;
                sensor_der=0;
                     
                Humedad_Temperatura();                      
                programacion=Calendario;
                permanecer_base=1;
                     if(Calendario==6 )
                    {
                       if(dia == 1 && RH_DHT11 < 77 )
                        {
                    output_bit(EB,1);

                    output_bit(in1,0);
                    output_bit(in2,1);
                    output_bit(in3,1);
                    output_bit(in4,0);

                    delay_ms(3000);
                    
                    
                    //gira a la izq
                    output_bit(in1,1);
                    output_bit(in2,0);
                    output_bit(in3,1);
                    output_bit(in4,0);
                    
                    delay_ms(1000);

                    // ROBOT MOVIENDOSE HACIA ADELANTE
                    output_bit(EB,1);
                    output_bit(in1,1);
                    output_bit(in2,0);
                    output_bit(in3,0);
                    output_bit(in4,1);;
                    permanecer_base=0;
                        }
                 else
                 {
                  permanecer_base=1;
                 }
                    }

                if(Calendario==5 )
                    {
                       if((dia == 1 || dia == 4) && RH_DHT11 < 77)
                 {
                    // ROBOT MOVIENDOSE HACIA ATRAS

                    output_bit(EB,1);

                    output_bit(in1,0);
                    output_bit(in2,1);
                    output_bit(in3,1);
                    output_bit(in4,0);

                    delay_ms(3000);
                    
                    
                    //gira a la izq
                    output_bit(in1,1);
                    output_bit(in2,0);
                    output_bit(in3,1);
                    output_bit(in4,0);
                    
                    delay_ms(1000);

                    // ROBOT MOVIENDOSE HACIA ADELANTE
                    output_bit(EB,1);
                    output_bit(in1,1);
                    output_bit(in2,0);
                    output_bit(in3,0);
                    output_bit(in4,1);;
                    permanecer_base=0;
                 }

                 else
                 {
                  permanecer_base=1;
                 }
                    }

               if(Calendario==4 )
                    {
                       if((dia == 1 || dia == 3 || dia == 5) && (RH_DHT11 < 77))
                 {
                   // ROBOT MOVIENDOSE HACIA ATRAS

                    output_bit(EB,1);

                    output_bit(in1,0);
                    output_bit(in2,1);
                    output_bit(in3,1);
                    output_bit(in4,0);

                    delay_ms(3000);
                    
                    
                    //gira a la izq
                    output_bit(in1,1);
                    output_bit(in2,0);
                    output_bit(in3,1);
                    output_bit(in4,0);
                    
                    delay_ms(1000);

                    // ROBOT MOVIENDOSE HACIA ADELANTE
                    output_bit(EB,1);
                    output_bit(in1,1);
                    output_bit(in2,0);
                    output_bit(in3,0);
                    output_bit(in4,1);;
                    permanecer_base=0;
                 }

                 else
                 {
                  permanecer_base=1;
                 }
                    }
           if(Calendario==3 )
                    {
                       if((dia == 1 || dia == 2 || dia == 4 || dia == 6) && (RH_DHT11 < 77))
                 {
                 // ROBOT MOVIENDOSE HACIA ATRAS

                    output_bit(EB,1);

                    output_bit(in1,0);
                    output_bit(in2,1);
                    output_bit(in3,1);
                    output_bit(in4,0);

                    delay_ms(3000);
                    
                    
                    //gira a la izq
                    output_bit(in1,1);
                    output_bit(in2,0);
                    output_bit(in3,1);
                    output_bit(in4,0);
                    
                    delay_ms(1000);

                    // ROBOT MOVIENDOSE HACIA ADELANTE
                    output_bit(EB,1);
                    output_bit(in1,1);
                    output_bit(in2,0);
                    output_bit(in3,0);
                    output_bit(in4,1);;
                    permanecer_base=0;
                 }

                 else
                 {
                   permanecer_base=1;
                 }
                    }
            

           if((Calendario==0) && (RH_DHT11 < 77))
                    {
                    // ROBOT MOVIENDOSE HACIA ATRAS

                    output_bit(EB,1);

                    output_bit(in1,0);
                    output_bit(in2,1);
                    output_bit(in3,1);
                    output_bit(in4,0);

                    delay_ms(3000);
                    
                    
                    //gira a la izq
                    output_bit(in1,1);
                    output_bit(in2,0);
                    output_bit(in3,1);
                    output_bit(in4,0);
                    
                    delay_ms(1000);

                    // ROBOT MOVIENDOSE HACIA ADELANTE
                    output_bit(EB,1);
                    output_bit(in1,1);
                    output_bit(in2,0);
                    output_bit(in3,0);
                    output_bit(in4,1);;
                    permanecer_base=0;
                    delay_ms(2000);
              }
           }while(permanecer_base==1);
reset_cpu();

}

Deteccion_Orientacion_Cargador()
{
output_bit(cuchilla1,0);
retono_bandera=1;
Obstaculos();
EMF=100;
while(retono_bandera==1)
{
Conversion();
estado = 4;

if( sensor_izq < EMF && sensor_der < EMF )//No detecto en ningun sensor, sigo para adelante y evado obstaculos
{

     output_bit(in1,1);
     output_bit(in2,0);
     output_bit(in3,0);
     output_bit(in4,1);
    //Conversion();
    Promedio_traccion();
     //Obstaculos();
    sensor_izq=60;
  sensor_der=60;
  Obstaculos();
  sensor_izq=60;
  sensor_der=60;
  Conversion();
     }

  if( sensor_izq > EMF && sensor_der < EMF ) //Detecto solo en el izq, retrocedo y giro a la izq, para que tome la direccion correcta
        {
      // MOTOR RETROCEDE 
         output_bit(in1,0);
         output_bit(in2,1);
         output_bit(in3,1);
         output_bit(in4,0);

         delay_ms(1000);

         // MOTOR GIRANDO HACIA LA IZQUIERDA
   
          output_bit(in1,1);//motor izq para adelante
          output_bit(in2,0);
          output_bit(in3,1);//motor derecho para atras
          output_bit(in4,0);
            delay_ms(500);
         
        sensor_izq =0;
            sensor_der =0;
           
            
        }
        if( sensor_izq > EMF && sensor_der > EMF ) // Si detecto campo en los dos sensores retrocedo y giro a la izq para que tomar la direcion correcta
              {
            // MOTOR RETROCEDE 
            output_bit(in1,0);
            output_bit(in2,1);
            output_bit(in3,1);
            output_bit(in4,0);

            delay_ms(1000);

            // MOTOR GIRANDO HACIA LA IZQUIERDA
   
             output_bit(in1,1);//motor izq para adelante
             output_bit(in2,0);
            output_bit(in3,1);//motor derecho para atras
             output_bit(in4,0);
                
                delay_ms(500);
           sensor_izq =0;
                sensor_der =0;
              }


               if( sensor_izq < EMF && sensor_der > EMF )// Si detecto solo el derecho, esta en la direccion correcta, va a Retorno
                 {
                     output_bit(in1,1);
                     output_bit(in2,0);
                     output_bit(in3,0);
                     output_bit(in4,1); 
                 /*
                     while(sensor_der > EMF)
                      {
                       Conversion();
                      }
*/
Retorno();
retono_bandera=0;
}

}

}

Bateria()

{

//output_bit(transistor_bateria,1); // desconecta la bateria del cargador, para poder medir la tension de la bateria y no la del cargador
//delay_ms(3000);
int i=0;
Reserva_promedio =0;

 for(i=0;i<16;i++) // saco un promedio de 8 muestras de la tension en la bateria
 {   
  set_adc_channel(4);
 delay_ms(1);
  read_adc(ADC_START_ONLY);
  vadc6=read_adc(ADC_READ_ONLY);
  Reserva=(long)((vadc6 * 5 / 1000)*100);
  
 Reserva_promedio = Reserva_promedio + Reserva;

  }
  Reserva_promedio = Reserva_promedio / 16;
if(Reserva_promedio < bateria_valor)

{
//output_bit(transistor_bateria,0);
bateria_bandera=0;
//delay_ms(3000);
//return 1;

}

if(Reserva_promedio > bateria_valor)
{
//output_bit(transistor_bateria,1);
bateria_bandera=1;
//return 0;
}

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
Apagar_Cuchilla()

{
ultra=1;

if(input(pulsador_cuchilla) == 1)
{
//output_bit(cuchilla1,0);
c=1;
delay_ms(500);
if(input(pulsador_cuchilla) == 1)
{
while(1)
{
output_bit(EB,0);
output_bit(buzzer_pin,1);
//output_bit(cuchilla1,0);
}
}
}

          /*
          if(input(pulsador_cuchilla) == 0 )
          {  

   
          	while (c==1)
          	{ 
          		if(input(pulsador_cuchilla) == 0 )
          		{ 
             		output_bit(EB,0);
                    delay_ms(1000);
                	if(input(pulsador_cuchilla) == 0 )
                 	{
                 		output_bit(EB,0);
          	     		output_bit(cuchilla1,1);
                 		delay_ms(1000);
                 		c=0;
                 	}             	
            	}
          }

          }
           */      
setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);

output_high(trigger);
delay_us(20);
output_low(trigger);
while(!input(eco))
{}
set_timer1(0);
while(input(eco))
{}
tiempo=get_timer1();
distancia= (tiempo/10)/(58.0);
distancia1=(tiempo/10)/(58.0);

delay_ms(200);

output_high(trigger);
delay_us(20);
output_low(trigger);
while(!input(eco))
{}
set_timer1(0);
while(input(eco))
{}
tiempo=get_timer1();
distancia=(tiempo/10)/(58.0);

if ( (distancia1 == distancia) && ( distancia > 0.46) && ( distancia < 0.58) )
{

output_bit(in1,0);
output_bit(in2,1);
output_bit(in3,1);
output_bit(in4,0);
delay_ms(2000);
Obstaculos();

}

}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned char Pulso() //funcion que setea manualmente la programacion del robot
{
// variables auxiliares
unsigned char Ciclo1 = 6; // Numero maximo de funciones disponibles
unsigned char Ciclo2;
unsigned char Cuenta_Funcion = 0;

// Leer estado del pulsador
// si no esta presionado, retornar 0
if ( input(pulsador) == 1 )
return 0;

// Pulsador presionado
// Retardo de 2 segundos iniciales
delay_ms(200);

// Leer estado del pulsador
// si no esta presionado, retornar 0
if ( input(pulsador) == 1 )
return 0;

     output_bit(EB,0); 
     output_bit(in1,0);
     output_bit(in2,0);
     output_bit(in3,0);
     output_bit(in4,0);
// Ciclo de recorrido de las funciones
// Disponibles
while ( Ciclo1 )
{

     // Beep con el buzzer
     BUZZER_Beep();

     // Incrementar cuenta de funcion
     Cuenta_Funcion++;   

     // Pulsador presionado

     // Esperar 1.5 segundos, testeando constantemente el 
     // Pulsador
     // Si el pulsador se libera dentro de estos 1.5 segundos
     // retornar el numero de funcion seleccionado
     // de lo contrario, avanzar a la siguiente funcion
     for ( Ciclo2 = 0; Ciclo2 < 150; Ciclo2++ )
        {
           // Test liberacion de pulsador
           if ( input(pulsador) == 1 )
              {
                 // Pulsador liberado, 
                 // retornar cuenta de funcion.
                programacion = Cuenta_Funcion;
           BUZZER_Beep();
                BUZZER_Beep(); 
           BUZZER_Beep();
           delay_ms(1000);

           return Cuenta_Funcion;
           }

           // Delay de 10ms
           delay_ms(10);
        }

     // decrementar numero de funciones
     // restantes por recorrer
     Ciclo1--;

     // Continuar con la siguiente secuencia
  }   
// Se ha mantenido pulsado el boton permanentemente y se han
// recorrido todas las funciones disponibles sin liberarlo
// generar un beep largo advirtiendo que se ha llegado al fin de las
// opciones y esperar que se libere el pulsador retornando 0

// Beep largo
output_bit(buzzer_pin,1);

delay_ms(2000);
output_bit(buzzer_pin,0);

// Esperar liberacion}
while ( input(pulsador) == 0 );

// retornar 0
return 0;
}

Programa() //segun lo fijado en pulso(); le ordeno al robot a hacer las funciones basicas y si es un dia que no debe cortar le hago volver a la base

{
if(programacion==6 )
{
if(dia == 1 )
{
Conversion();
Promedio_traccion();
Pwm_cuchilla(); // tiene que estar despues de conversion y antes de obstaculos (por la simulacion de obstaculo al atorarse la cuchilla)
//output_bit(cuchilla1,1);
Obstaculos();
Calendario=6;
//Movimiento();
}
else
{
Deteccion_Orientacion_Cargador();
}
}

                if(programacion==5 )
                    {
                       if(dia == 1 || dia == 4)
                 {
                  
                   Conversion();
                 Promedio_traccion();
                  Pwm_cuchilla(); // tiene que estar despues de conversion y antes de obstaculos (por la simulacion de obstaculo al atorarse la cuchilla)
                 Obstaculos();
                 Calendario=5;
                        //Movimiento();
                 }

                 else
                 {
                 Deteccion_Orientacion_Cargador();
                 }
                    }

               if(programacion==4 )
                    {
                       if(dia == 1 || dia == 3 || dia == 5)
                 {
                 Conversion();
                 Promedio_traccion();
                   Pwm_cuchilla(); // tiene que estar despues de conversion y antes de obstaculos (por la simulacion de obstaculo al atorarse la cuchilla)
                 Obstaculos();
                        //Movimiento();
                 Calendario=4;
                 }

                 else
                 {
                 Deteccion_Orientacion_Cargador();
                 }
                    }
           if(programacion==3 )
                    {
                       if(dia == 1 || dia == 2 || dia == 4 || dia == 6)
                 {
                 Conversion();
                 Promedio_traccion();
                   Pwm_cuchilla(); // tiene que estar despues de conversion y antes de obstaculos (por la simulacion de obstaculo al atorarse la cuchilla)
                 Obstaculos();
                 Calendario=3;
                        //Movimiento();
                 }

                 else
                 {
                 Deteccion_Orientacion_Cargador();
                 }
                    }
                if(programacion==2)
                    {
                     proteccion=1;
                     Conversion();
                     Promedio_traccion();
                     Pwm_cuchilla(); // tiene que estar despues de conversion y antes de obstaculos (por la simulacion de obstaculo al atorarse la cuchilla)
                     Obstaculos();
                     Calendario=2;
                    }

           if(programacion==1)
                    {
                    
                    output_bit(cuchilla1,0);
                    Deteccion_Orientacion_Cargador();
                    
                    }

               if(programacion==0)
                    {
                    Conversion();
                    Promedio_traccion();
                    Pwm_cuchilla(); // tiene que estar despues de conversion y antes de obstaculos (por la simulacion de obstaculo al atorarse la cuchilla)
                    Obstaculos();
                    Calendario=0;
                    //Movimiento();
              }
}

// void BUZZER_Beep()
// --------------------------------------------------------------
// Rutina que produce un beep con el buzzer
BUZZER_Beep()
{
output_bit(buzzer_pin,1);

delay_ms(100);
output_bit(buzzer_pin,0);

delay_ms(100);
}
// --------------------------------------------------------------

// void BUZZER_Doble_Beep()
// --------------------------------------------------------------
// Rutina que produce un doble beep con el buzzer
BUZZER_Doble_Beep()
{
BUZZER_Beep();
BUZZER_Beep();
}

Humedad_Temperatura()

{

int Tint;
int Tdec;
int RHint;
int RHdec;
int CRC;
int i;
int j;
char chkCRC;
int32 Respuesta;

Tint=0;
Tdec=0;
RHint=0;
RHdec=0;
Respuesta=0;
CRC=0;
//set_tris_b(get_tris_b()&0xEF);
set_tris_c(10010000);
output_high(DHT11);
delay_ms(25);
output_low(DHT11);
delay_ms(25); // Por lo menos 18us
output_high(DHT11);
delay_us(30);
//set_tris_b(get_tris_b()|0x10);
set_tris_c(10010000);

for (i=0;i<100;i++) { // Espera respuesta de 20-40us
if (!input(DHT11)) break;
delay_us(1);
}
if (i==100) return -1;
for (i=0;i<100;i++) { // Espera respuesta de 80us
if (input(DHT11)) break;
delay_us(1);
}
if (i==100) return -2;
for (i=0;i<100;i++) { // Espera respuesta de 80us
if (!input(DHT11)) break;
delay_us(1);
}
if (i==100) return -3;
for (i=0;i<32;i++) {
for (j=0;j<100;j++) {
if (input(DHT11)) break;
delay_us(1);
}
if (i==100) return -4;
delay_us(30);
Respuesta<<=1;
if (input(DHT11)) Respuesta|=1;
for (j=0;j<100;j++) {
if (!input(DHT11)) break;
delay_us(1);
}
if (i==100) return -5;
}
for (i=0;i<8;i++) {
for (j=0;j<100;j++) {
if (input(DHT11)) break;
delay_us(1);
}
if (i==100) return -4;
delay_us(30);
CRC<<=1;
if (input(DHT11)) CRC|=1;
for (j=0;j<100;j++) {
if (!input(DHT11)) break;
delay_us(1);
}
if (i==100) return -5;
}
RHint=make8(Respuesta,3);
RHdec=make8(Respuesta,2);
Tint=make8(Respuesta,1);
Tdec=make8(Respuesta,0);
chkCRC=(RHint+RHdec+Tint+Tdec)&0xFF;
//set_tris_b(get_tris_b()&0xEF);
set_tris_c(00010000);
output_high(DHT11);

T_DHT11=(float)make16(Tint,Tdec)/256.0;
RH_DHT11=(float)make16(RHint,RHdec)/256.0;

if (RH_DHT11>77)

  {         
 output_bit(in1,0);
  output_bit(in2,0);
  output_bit(in3,0);
  output_bit(in4,0);

 output_bit(buzzer_pin,1);


  
 }
if (chkCRC==CRC) return 0;
return -6;

}

bluetooth()
{
int app=0;
float vadcmotor_izq=0;
float vadcmotor_der=0;
float vadcsensor_izq=0;
float vadcsensor_der=0;
float vadccuchilla=0;
float vadcReserva =0;
float vadcT_DHT11 =0;
float vadcRH_DHT11=0;
float vadcFmotor_izq=0;
float vadcFmotor_der=0;
float vadcFsensor_izq=0;
float vadcFsensor_der=0;
float vadcFcuchilla=0;
float vadcFReserva =0;
float vadcFT_DHT11 =0;
float vadcFRH_DHT11=0;
float vadcGRADOS=0;
float vadcFGRADOS=0;
float vadctraccion=0;
float vadcftraccion=0;
int tested=0;
float traccion_devuelta=0;

if (kbhit())
{
control = getc();
if(control == 57) //9 APP CONECTADO
{
app=1;
BUZZER_Beep();
}
if(control == 48) //envia en que programacion esta definida
{
if (programacion == 0)
{
putc(48);
}
else
{
if (programacion == 1)
{
putc(49);
}
else
{
if (programacion == 2)
{
putc(50);
}
else
{
if (programacion == 3)
{
putc(51);
}
else
{
if (programacion == 4)
{
putc(52);
}
else
{
putc(53);
}
}
}
}
}
}
if(control == 49) //recibe 1 - programacion 1
{
putc(49);
programacion=1;
BUZZER_Beep();
}
if(control == 50) //recibe 2 - prog 2
{
putc(50);
programacion=2;
BUZZER_Beep();
BUZZER_Beep();
}
if(control == 51) //recibe 3 - prog 3
{
putc(51);
programacion=3;
BUZZER_Beep();
BUZZER_Beep();
BUZZER_Beep();
}
if(control == 52) // recibe 4 - prog 4
{
putc(52);
programacion=4;
BUZZER_Beep();
BUZZER_Beep();
BUZZER_Beep();
BUZZER_Beep();
}
if(control == 53) //recibe 5 - prog 5
{
putc(53);
programacion=5;
BUZZER_Beep();
BUZZER_Beep();
BUZZER_Beep();
BUZZER_Beep();
BUZZER_Beep();
}
//manejar
if(control == 120) // sale de la ventana de manejo deveria volver a manejo autonomo -- resibe una x
{
stop=0;
}
if(control == 115) //corta el uso normal del robot -- resibe una s
{
stop=1;
output_bit(in1,0);
output_bit(in2,0);
output_bit(in3,0);
output_bit(in4,0);
output_bit(cuchilla1,0);
}
if(control == 117) // u adelante - cambiar
{
output_bit(in1,1);
output_bit(in2,0);
output_bit(in3,0);
output_bit(in4,1);
}
if(control == 108) // l izquierda - cambiar
{
output_bit(in1,1);
output_bit(in2,0);
output_bit(in3,1);
output_bit(in4,0);
}
if(control == 114) // r derecha - cambiar
{
output_bit(in1,0);
output_bit(in2,1);
output_bit(in3,0);
output_bit(in4,1);
}
if(control == 100) // d atras - cambiar
{
output_bit(in1,0);
output_bit(in2,1);
output_bit(in3,1);
output_bit(in4,0);
}
if(control == 83) // S stop - cambiar
{
output_bit(in1,0);
output_bit(in2,0);
output_bit(in3,0);
output_bit(in4,0);
}
if(control == 99) // c cuchilla - cambiar
{
output_bit(cuchilla1,1);
}
if(control == 67) // C detener cuchilla - cambiar
{
output_bit(cuchilla1,0);
}
if(control == 82) // recibe R -> retorna a base
{
// retornar=1; // esta declarado pero no puesto para volver
putc(54); // envia 6
//bateria_valor=170;
//Deteccion_Orientacion_Cargador();
}
if(control == 116) // recibe t
{
tested=1;
}
if(control == 118) // recibe v
{
tested=0;
}
if(control == 66) // recibe B
{
vadcFReserva = Reserva;
vadcReserva = vadcFReserva/100;
printf("%f",vadcReserva);
}
if(control == 84) // recibe T
{
vadcT_DHT11 = T_DHT11/100;
printf("%f",vadcT_DHT11);
}
if(control == 72) // recibe H
{
vadcRH_DHT11=RH_DHT11 /100;
printf("%f",vadcRH_DHT11);
// printf("3.15");
}
if(control == 77) // recibe M
{
vadcFmotor_der = motor_der_promedio;
vadcmotor_der = vadcFmotor_der/100;
printf("%f",vadcmotor_der);
}
if(control == 109) // recibe m
{
vadcFmotor_izq=motor_izq_promedio;
vadcmotor_izq = vadcFmotor_izq/100;
printf("%f",vadcmotor_izq);
}
if(control == 110) // recibe n cucilla
{
vadcFcuchilla = cuchilla;
vadccuchilla = vadcFcuchilla/100;
printf("%f",vadccuchilla);
}
if(control == 89) // recibe Y sensor derecha
{
vadcFsensor_der = sensor_der;
vadcsensor_der = vadcFsensor_der/100;
printf("%f",vadcsensor_der);
}

if(control == 88) // recibe X sensor izquierda
{

  vadcFsensor_izq = sensor_izq;
  vadcsensor_izq = vadcFsensor_izq/100;
  printf("%f",vadcsensor_izq);
    }
/*
if(control == 81) // recibe Q grados Z
{
vadcFGRADOS= xlee;
vadcGRADOS=vadcFGRADOS /100;
printf("%f",vadcGRADOS);
}
/
if(control == 69) // recibe E ESTADO
{
printf("%d",estado);
}
/

if(control == 111) // recibe o Traccion
{
vadctraccion = traccion;
vadcftraccion = vadctraccion/100;
printf("%f",vadcftraccion);
}

if(control == 79) // recibe O Traccion
{
traccion_devuelta = getch();
BUZZER_Beep();
traccion = traccion_devuelta*100;
vadctraccion = traccion;
vadcftraccion = vadctraccion/100;
printf("%f",vadcftraccion);
}
*/
}
}
